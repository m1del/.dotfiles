#!/bin/bash

# Sync dotfiles repo and ensure that dotfiles are tangled correctly afterward

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[0;31m'
NC='\033[0m'

# Navigate to dotfiles directory
echo -e "${BLUE}Navigating to dotfiles directory...${NC}"
pushd ~/.dotfiles >/dev/null || {
  echo -e "${RED}Failed to navigate to ~/.dotfiles.${NC}"
  exit 1
}

echo -e "${BLUE}Stashing existing changes...${NC}"
stash_result=$(git stash push -m "sync-dotfiles: Before syncing dotfiles")
needs_pop=1
if [[ "$stash_result" == "No local changes to save" ]]; then
  needs_pop=0
fi

echo -e "${BLUE}Pulling updates from dotfiles repo...${NC}"
git pull origin main || {
  echo -e "${RED}Failed to pull updates.${NC}"
  popd >/dev/null
  exit 1
}

if [[ $needs_pop -eq 1 ]]; then
  echo -e "${BLUE}Popping stashed changes...${NC}"
  git stash pop
fi

unmerged_files=$(git diff --name-only --diff-filter=U)
if [[ ! -z $unmerged_files ]]; then
  echo -e "${RED}The following files have merge conflicts after popping the stash:${NC}"
  printf "%s\n" "$unmerged_files" # Ensure newlines are printed
else
  # Run stow to link all dotfiles
  echo -e "${GREEN}Linking dotfiles with stow...${NC}"

  stow -v --dotfiles -t ~ . || { echo -e "${RED}Failed to stow dotfiles.${NC}"; }
fi

# Return to the original directory
popd >/dev/null
echo -e "${GREEN}Done! Returned to the original directory.${NC}"
